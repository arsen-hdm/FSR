clear all
close all
clc;

% Available tracks
tracks = ["Monza", "Suzuka", "IMS"];

% show the options
fprintf('Select a track:\n');
for i = 1:length(tracks)
    fprintf('  %d - %s\n', i, tracks(i));
end

% request of a choiche from the user
valid_choice = false;
while ~valid_choice
    choice = input('Type the number corresponding to the desired track: ');
    
    if isnumeric(choice) && isscalar(choice) && choice >= 1 && choice <= length(tracks)
        valid_choice = true;
        choosen_track = tracks(choice);
        fprintf('You have choosen the track: %s\n', choosen_track);
    else
        fprintf('Choice is not admissible, make a choice between 1 and %d.\n', length(tracks));
    end
end

path = ['circuit_' char(choosen_track) '/'];
load([path 'track.mat']);

% track options
track_options = ["medium_trajectory", "optimal_trajectory"];

% show the options
fprintf('Select a trajectory:\n');
for i = 1:length(track_options)
    fprintf('  %d - %s\n', i, track_options(i));
end

% request of a choiche from the user
valid_choice = false;
while ~valid_choice
    choice = input('Type the number corresponding to the desired trajectory: ');
    
    if isnumeric(choice) && isscalar(choice) && choice >= 1 && choice <= length(track_options)
        valid_choice = true;
        choosen_option = track_options(choice);
        fprintf('You have choosen the: %s\n', choosen_option);
    else
        fprintf('Choice is not admissible, make a choice between 1 and %d.\n', length(track_options));
    end
end

load([path char(choosen_option)]);

% car options
car_options = ["Fiat_600", "WRC_Yaris", "F1_car"];

% total time of the simulation is based on the choosen car, for now we're
% considering non optimal path planning and so also the track times will
% not be optimal

final_time_options = [60*8, 60*4, 60*2];

% show the options
fprintf('Select a car:\n');
for i = 1:length(car_options)
    fprintf('  %d - %s\n', i, car_options(i));
end

% request of a choiche from the user
valid_choice = false;
while ~valid_choice
    choice = input('Type the number corresponding to the desired car: ');
    
    if isnumeric(choice) && isscalar(choice) && choice >= 1 && choice <= length(car_options)
        valid_choice = true;
        choosen_option = car_options(choice);
        fprintf('You have choosen the: %s\n', choosen_option);
        tf = final_time_options(choice);
    else
        fprintf('Choice is not admissible, make a choice between 1 and %d.\n', length(car_options));
    end
end

load(['Models/' char(choosen_option)]);

% Since for now we're using only the I/O Linearization Control here you can
% choose the b value:

b = 5;

CGTF=1;
CGTR=0.84;

k1 = 30;
k2 = 3;
% k1 = 5;
% k2 = 2;
% k1 = 60;
% k2 = 42;
% k1 = 4;
% k2= 3.5;
% k1=3;
% k2=2.5;
% % k1 = 4;
% % k2= 3.5;

% Feedback options
feedback_options = ["Full-State-Feedback", "Runge-Kutta 2nd order", "Runge-Kutta 4th order"];

% show the options
fprintf('Select a Feedback:\n');
for i = 1:length(feedback_options)
    fprintf('  %d - %s\n', i, feedback_options(i));
end

% request of a choiche from the user
valid_choice = false;
while ~valid_choice
    choice = input('Type the number corresponding to the desired feedback strategy: ');
    
    if isnumeric(choice) && isscalar(choice) && choice >= 1 && choice <= length(feedback_options)
        valid_choice = true;
        choosen_option = feedback_options(choice);
        fprintf('You have choosen the: %s\n', choosen_option);

        switch choice
            case 1

                open("Trajectory_tracking_full_state_feedback.slx");
                out = sim("Trajectory_tracking_full_state_feedback.slx");

            case 2
                
                fprintf('Avvio simulazione con Runge-Kutta 2° ordine...\n');
                open("Trajectory_tracking_2nd_order.slx");
                out = sim("Trajectory_tracking_2nd_order.slx");
            case 3
                fprintf('Avvio simulazione con Runge-Kutta 4° ordine...\n');
                open("Trajectory_tracking_4th_order.slx");
                out = sim("Trajectory_tracking_4th_order.slx");
    else
        fprintf('Choice is not admissible, make a choice between 1 and %d.\n', length(feedback_options));
    end
end

if





%Simulazione
    %Full-State Feedback
    open("Trajectory_tracking_full_state_feedback.slx");
    out = sim("Trajectory_tracking_full_state_feedback.slx");
    
    % %Runge-Kutta 2nd order
    % open("Trajectory_tracking_2nd_order.slx");
    % out = sim("Trajectory_tracking_2nd_order.slx");
    
    % %Runge-Kutta 4nd order
    % open("Trajectory_tracking_4th_order.slx");
    % out = sim("Trajectory_tracking_4th_order.slx");

%Plot
    % Circuit Result
    A = figure
    plot(x_in,y_in,'.','Color','red');
    hold on;
    plot(x_out,y_out,'.','Color','blue');
    hold on;
    plot(out.x.Data,out.y.Data,'.','Color','black');
    xlabel('x (m)');
    ylabel('y (m)');
    hold on;
    plot(x_values,y_values,'Color','green');
    hold on;
    grid;
    title('Track')
    
    %Plot Elaborato
    personal_plot6(out.error_x.Time,out.error_x.Data(1,:),'Time (s)','Error Position x-axis (m)','');
    personal_plot6(out.error_y.Time,out.error_y.Data(1,:),'Time (s)','Error Position y-axis (m)','');
    personal_plot6(out.error_norm.Time,out.error_norm.Data,'Time (s)','Error Position Norm (m)','');
    personal_plot6(out.v.Time,out.v.Data,'Time (s)','v (m/s)','');
    personal_plot6(out.w.Time,out.w.Data,'Time (s)','w (rad/s)','');
    personal_plot6(out.e1.Time,out.e1.Data,'Time (s)','Error y1 (m)',''); 
    personal_plot6(out.e2.Time,out.e2.Data,'Time (s)','Error y2 (m)',''); 